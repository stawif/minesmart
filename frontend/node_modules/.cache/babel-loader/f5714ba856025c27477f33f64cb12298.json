{"ast":null,"code":"var _jsxFileName = \"/Users/ashokbatesar/minesmart/frontend/src/components/registration/MachinePartyRegistration.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"../modular/InputPartyNameField\";\nimport InputContactField from \"../modular/InputContactField\";\nimport InputPartyVillageField from \"../modular/InputPartyVillageField\";\nimport InputCommonName from \"../modular/InputCommonName\";\nexport default class MachinePartyRegistration extends React.Component {\n  // Check existence of party name\n  //Form Handler\n  // toggle load status\n  constructor(props) {\n    super(props);\n\n    this.fetchProduct = async () => {\n      try {\n        const responseMachineList = await fetch(\"http://127.0.0.1:8000/list-of-machineparty/\");\n        const jsonMachineList = await responseMachineList.json();\n        this.setState({\n          partyList: jsonMachineList\n        }); //this.state.partyList = jsonMachineList;\n      } catch {\n        this.toggleLoadStatus();\n      }\n    };\n\n    this.checkParty = () => {\n      try {\n        this.setState({\n          partyExistMessage: \"\",\n          responseMessage: \"\",\n          buttonStatus: {\n            visibility: \"visible\"\n          }\n        });\n\n        const showList = (item, index) => {\n          if (this.state.partyName.length < 5) {\n            this.setState({\n              partyExistMessage: \"* Please Enter Minimum length of 5\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n            this.setState({\n              partyExistMessage: \"* This party name is already exist!!!\",\n              buttonStatus: {\n                visibility: \"hidden\"\n              }\n            });\n          } else {}\n        };\n\n        this.state.partyList.forEach(showList);\n      } catch (err) {}\n    };\n\n    this.onSubmit = e => {\n      axios.post(\"http://127.0.0.1:8000/machine-party-registration/\", {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage,\n        crasher: this.state.crasher\n      }).then(res => {\n        this.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      }).catch(error => {//console.log(error.response.request._response);\n      });\n      e.target.reset();\n      e.preventDefault();\n    };\n\n    this.toggleLoadStatus = async () => {\n      if (this.state.loadingStatus.visibility === \"visible\") {\n        await this.setState({\n          loadingStatus: {\n            visibility: \"hidden\"\n          },\n          loadedStatus: {\n            visibility: \"visible\"\n          }\n        });\n      } else {\n        await this.setState({\n          loadingStatus: {\n            visibility: \"visible\"\n          },\n          loadedStatus: {\n            visibility: \"hidden\"\n          }\n        });\n      }\n    };\n\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      crasher: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      loadingStatus: {\n        visibility: \"visible\"\n      },\n      loadedStatus: {\n        visibility: \"hidden\"\n      }\n    };\n    this.fetchProduct = this.fetchProduct.bind(this);\n    this.checkParty = this.checkParty.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.toggleLoadStatus = this.toggleLoadStatus.bind(this);\n    this.fetchProduct();\n  }\n\n  componentDidMount() {\n    this.toggleLoadStatus();\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-container form-group\",\n      onSubmit: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"headingViewPart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Machine Party Registration\"), React.createElement(\"div\", {\n      className: \"pt-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(InputPartyNameField, {\n      callbackFromParent: dataFromChild => {\n        this.state.partyName = dataFromChild;\n        this.checkParty();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, this.state.partyExistMessage), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(InputContactField, {\n      callbackFromParent: dataFromChild => {\n        this.state.partyContact = dataFromChild;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(InputPartyVillageField, {\n      callbackFromParent: dataFromChild => {\n        this.state.partyVillage = dataFromChild;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(InputCommonName, {\n      minLength: 5,\n      placeholderParent: \"Crasher\",\n      callbackFromParent: dataFromChild => {\n        this.state.crasher = dataFromChild;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, this.state.responseMessage), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-outline-dark\",\n      style: this.state.buttonStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Save\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/ashokbatesar/minesmart/frontend/src/components/registration/MachinePartyRegistration.js"],"names":["React","axios","InputPartyNameField","InputContactField","InputPartyVillageField","InputCommonName","MachinePartyRegistration","Component","constructor","props","fetchProduct","responseMachineList","fetch","jsonMachineList","json","setState","partyList","toggleLoadStatus","checkParty","partyExistMessage","responseMessage","buttonStatus","visibility","showList","item","index","state","partyName","length","toLowerCase","name","forEach","err","onSubmit","e","post","contact","partyContact","village","partyVillage","crasher","then","res","data","catch","error","target","reset","preventDefault","loadingStatus","loadedStatus","bind","componentDidMount","render","dataFromChild"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,sBAAP,MAAmC,mCAAnC;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AAEA,eAAe,MAAMC,wBAAN,SAAuCN,KAAK,CAACO,SAA7C,CAAuD;AAapE;AAkCA;AAuBA;AAuBAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA5FnBC,YA4FmB,GA5FJ,YAAY;AACzB,UAAI;AACF,cAAMC,mBAAmB,GAAG,MAAMC,KAAK,CACrC,6CADqC,CAAvC;AAGA,cAAMC,eAAe,GAAG,MAAMF,mBAAmB,CAACG,IAApB,EAA9B;AACA,aAAKC,QAAL,CAAc;AAACC,UAAAA,SAAS,EAAEH;AAAZ,SAAd,EALE,CAMF;AACD,OAPD,CAOE,MAAM;AACN,aAAKI,gBAAL;AACD;AACF,KAiFkB;;AAAA,SA/EnBC,UA+EmB,GA/EN,MAAM;AACjB,UAAI;AACF,aAAKH,QAAL,CAAc;AACZI,UAAAA,iBAAiB,EAAE,EADP;AAEZC,UAAAA,eAAe,EAAE,EAFL;AAGZC,UAAAA,YAAY,EAAE;AACZC,YAAAA,UAAU,EAAE;AADA;AAHF,SAAd;;AAOA,cAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChC,cAAI,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,MAArB,GAA8B,CAAlC,EAAoC;AAClC,iBAAKb,QAAL,CAAc;AACZI,cAAAA,iBAAiB,EAAE,oCADP;AAEZE,cAAAA,YAAY,EAAE;AACZC,gBAAAA,UAAU,EAAE;AADA;AAFF,aAAd;AAMD,WAPD,MAQK,IAAI,KAAKI,KAAL,CAAWC,SAAX,CAAqBE,WAArB,OAAuCL,IAAI,CAACM,IAAL,CAAUD,WAAV,EAA3C,EAAoE;AACvE,iBAAKd,QAAL,CAAc;AACZI,cAAAA,iBAAiB,EAAE,uCADP;AAEZE,cAAAA,YAAY,EAAE;AACZC,gBAAAA,UAAU,EAAE;AADA;AAFF,aAAd;AAMD,WAPI,MAOE,CACN;AACF,SAlBD;;AAoBA,aAAKI,KAAL,CAAWV,SAAX,CAAqBe,OAArB,CAA6BR,QAA7B;AACD,OA7BD,CA6BE,OAAOS,GAAP,EAAY,CAAE;AACjB,KAgDkB;;AAAA,SA7CnBC,QA6CmB,GA7CRC,CAAC,IAAI;AACdjC,MAAAA,KAAK,CACFkC,IADH,CACQ,mDADR,EAC6D;AACzDL,QAAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWC,SADwC;AAEzDS,QAAAA,OAAO,EAAE,KAAKV,KAAL,CAAWW,YAFqC;AAGzDC,QAAAA,OAAO,EAAE,KAAKZ,KAAL,CAAWa,YAHqC;AAIzDC,QAAAA,OAAO,EAAE,KAAKd,KAAL,CAAWc;AAJqC,OAD7D,EAOGC,IAPH,CAOQC,GAAG,IAAI;AACX,aAAKhC,YAAL;AACA,aAAKK,QAAL,CAAc;AACZK,UAAAA,eAAe,EAAEsB,GAAG,CAACC;AADT,SAAd;AAGD,OAZH,EAaGC,KAbH,CAaSC,KAAK,IAAI,CACd;AACD,OAfH;AAiBAX,MAAAA,CAAC,CAACY,MAAF,CAASC,KAAT;AACAb,MAAAA,CAAC,CAACc,cAAF;AACD,KAyBkB;;AAAA,SAtBnB/B,gBAsBmB,GAtBA,YAAY;AAC7B,UAAI,KAAKS,KAAL,CAAWuB,aAAX,CAAyB3B,UAAzB,KAAwC,SAA5C,EAAuD;AACrD,cAAM,KAAKP,QAAL,CAAc;AAClBkC,UAAAA,aAAa,EAAE;AACb3B,YAAAA,UAAU,EAAE;AADC,WADG;AAIlB4B,UAAAA,YAAY,EAAE;AACZ5B,YAAAA,UAAU,EAAE;AADA;AAJI,SAAd,CAAN;AAQD,OATD,MASO;AACL,cAAM,KAAKP,QAAL,CAAc;AAClBkC,UAAAA,aAAa,EAAE;AACb3B,YAAAA,UAAU,EAAE;AADC,WADG;AAIlB4B,UAAAA,YAAY,EAAE;AACZ5B,YAAAA,UAAU,EAAE;AADA;AAJI,SAAd,CAAN;AAQD;AACF,KAEkB;;AAGjB,SAAKI,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,EADA;AAEXU,MAAAA,YAAY,EAAE,EAFH;AAGXE,MAAAA,YAAY,EAAE,EAHH;AAIXvB,MAAAA,SAAS,EAAE,EAJA;AAKXG,MAAAA,iBAAiB,EAAE,EALR;AAMXC,MAAAA,eAAe,EAAE,EANN;AAOXoB,MAAAA,OAAO,EAAE,EAPE;AAQXnB,MAAAA,YAAY,EAAE;AACZC,QAAAA,UAAU,EAAE;AADA,OARH;AAWX2B,MAAAA,aAAa,EAAE;AACb3B,QAAAA,UAAU,EAAE;AADC,OAXJ;AAcX4B,MAAAA,YAAY,EAAE;AACZ5B,QAAAA,UAAU,EAAE;AADA;AAdH,KAAb;AAkBA,SAAKZ,YAAL,GAAoB,KAAKA,YAAL,CAAkByC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKjC,UAAL,GAAkB,KAAKA,UAAL,CAAgBiC,IAAhB,CAAqB,IAArB,CAAlB;AAEA,SAAKlB,QAAL,GAAgB,KAAKA,QAAL,CAAckB,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKlC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBkC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKzC,YAAL;AACD;;AAED0C,EAAAA,iBAAiB,GAAG;AAClB,SAAKnC,gBAAL;AACD;;AAEDoC,EAAAA,MAAM,GAAG;AACP,WACE;AACE,MAAA,SAAS,EAAC,2BADZ;AAEE,MAAA,QAAQ,EAAEnB,CAAC,IAAI,KAAKD,QAAL,CAAcC,CAAd,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAJF,EAKE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,mBAAD;AACE,MAAA,kBAAkB,EAAEoB,aAAa,IAAI;AACnC,aAAK5B,KAAL,CAAWC,SAAX,GAAuB2B,aAAvB;AACA,aAAKpC,UAAL;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKQ,KAAL,CAAWP,iBAAf,CAPF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAWE,oBAAC,iBAAD;AACE,MAAA,kBAAkB,EAAEmC,aAAa,IAAI;AACnC,aAAK5B,KAAL,CAAWW,YAAX,GAA0BiB,aAA1B;AACD,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBF,EAoBE,oBAAC,sBAAD;AACE,MAAA,kBAAkB,EAAEA,aAAa,IAAI;AACnC,aAAK5B,KAAL,CAAWa,YAAX,GAA0Be,aAA1B;AACD,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBF,EA0BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BF,EA2BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3BF,EA6BE,oBAAC,eAAD;AACE,MAAA,SAAS,EAAE,CADb;AAEE,MAAA,iBAAiB,EAAE,SAFrB;AAGE,MAAA,kBAAkB,EAAEA,aAAa,IAAI;AACnC,aAAK5B,KAAL,CAAWc,OAAX,GAAqBc,aAArB;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BF,CALF,EA2CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAK5B,KAAL,CAAWN,eAAf,CA3CF,EA4CE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,sBAFZ;AAGE,MAAA,KAAK,EAAE,KAAKM,KAAL,CAAWL,YAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5CF,CADF;AAsDD;;AArLmE","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport InputPartyNameField from \"../modular/InputPartyNameField\";\nimport InputContactField from \"../modular/InputContactField\";\nimport InputPartyVillageField from \"../modular/InputPartyVillageField\";\nimport InputCommonName from \"../modular/InputCommonName\";\n\nexport default class MachinePartyRegistration extends React.Component {\n  fetchProduct = async () => {\n    try {\n      const responseMachineList = await fetch(\n        \"http://127.0.0.1:8000/list-of-machineparty/\"\n      );\n      const jsonMachineList = await responseMachineList.json();\n      this.setState({partyList: jsonMachineList})\n      //this.state.partyList = jsonMachineList;\n    } catch {\n      this.toggleLoadStatus();\n    }\n  };\n  // Check existence of party name\n  checkParty = () => {\n    try {\n      this.setState({\n        partyExistMessage: \"\",\n        responseMessage: \"\",\n        buttonStatus: {\n          visibility: \"visible\"\n        }\n      });\n      const showList = (item, index) => {\n        if( this.state.partyName.length < 5){\n          this.setState({\n            partyExistMessage: \"* Please Enter Minimum length of 5\",\n            buttonStatus: {\n              visibility: \"hidden\"\n            }\n          });\n        }\n        else if (this.state.partyName.toLowerCase() === item.name.toLowerCase()) {\n          this.setState({\n            partyExistMessage: \"* This party name is already exist!!!\",\n            buttonStatus: {\n              visibility: \"hidden\"\n            }\n          });\n        } else {\n        }\n      };\n\n      this.state.partyList.forEach(showList);\n    } catch (err) {}\n  };\n\n  //Form Handler\n  onSubmit = e => {\n    axios\n      .post(\"http://127.0.0.1:8000/machine-party-registration/\", {\n        name: this.state.partyName,\n        contact: this.state.partyContact,\n        village: this.state.partyVillage,\n        crasher: this.state.crasher\n      })\n      .then(res => {\n        this.fetchProduct();\n        this.setState({\n          responseMessage: res.data\n        });\n      })\n      .catch(error => {\n        //console.log(error.response.request._response);\n      });\n\n    e.target.reset();\n    e.preventDefault();\n  };\n\n  // toggle load status\n  toggleLoadStatus = async () => {\n    if (this.state.loadingStatus.visibility === \"visible\") {\n      await this.setState({\n        loadingStatus: {\n          visibility: \"hidden\"\n        },\n        loadedStatus: {\n          visibility: \"visible\"\n        }\n      });\n    } else {\n      await this.setState({\n        loadingStatus: {\n          visibility: \"visible\"\n        },\n        loadedStatus: {\n          visibility: \"hidden\"\n        }\n      });\n    }\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      partyName: \"\",\n      partyContact: \"\",\n      partyVillage: \"\",\n      partyList: {},\n      partyExistMessage: \"\",\n      responseMessage: \"\",\n      crasher: \"\",\n      buttonStatus: {\n        visibility: \"visible\"\n      },\n      loadingStatus: {\n        visibility: \"visible\"\n      },\n      loadedStatus: {\n        visibility: \"hidden\"\n      }\n    };\n    this.fetchProduct = this.fetchProduct.bind(this);\n    this.checkParty = this.checkParty.bind(this);\n\n    this.onSubmit = this.onSubmit.bind(this);\n    this.toggleLoadStatus = this.toggleLoadStatus.bind(this);\n    this.fetchProduct();\n  }\n\n  componentDidMount() {\n    this.toggleLoadStatus();\n  }\n\n  render() {\n    return (\n      <form\n        className=\"form-container form-group\"\n        onSubmit={e => this.onSubmit(e)}\n      >\n        <p className=\"headingViewPart\">Machine Party Registration</p>\n        <div className=\"pt-5\">\n          <InputPartyNameField\n            callbackFromParent={dataFromChild => {\n              this.state.partyName = dataFromChild;\n              this.checkParty();\n            }}\n          />\n          <p>{this.state.partyExistMessage}</p>\n\n          <br />\n\n          <InputContactField\n            callbackFromParent={dataFromChild => {\n              this.state.partyContact = dataFromChild;\n            }}\n          />\n\n          <br />\n          <br />\n\n          <InputPartyVillageField\n            callbackFromParent={dataFromChild => {\n              this.state.partyVillage = dataFromChild;\n            }}\n          />\n\n          <br />\n          <br />\n\n          <InputCommonName\n            minLength={5}\n            placeholderParent={\"Crasher\"}\n            callbackFromParent={dataFromChild => {\n              this.state.crasher = dataFromChild;\n            }}\n          />\n        </div>\n\n        <p>{this.state.responseMessage}</p>\n        <button\n          type=\"submit\"\n          className=\"btn btn-outline-dark\"\n          style={this.state.buttonStatus}\n        >\n          Save\n        </button>\n      </form>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}